{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/FocusDuration.js","pomodoro/BreakDuration.js","pomodoro/ProgressBar.js","pomodoro/Countdown.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","utils/change-session-type/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","FocusDuration","min","max","label","session","setSession","data-testid","focusDuration","type","active","onClick","BreakDuration","breakDuration","ProgressBar","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","currentDuration","timer","width","Countdown","isTimerRunning","sessionTypeVerb","Pomodoro","useState","setIsTimerRunning","focusSession","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","changeSessionType","aria-label","title","prevState","oi","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f67d1080.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  // deal with displaying 60 minutes\n  if (givenSeconds === 3600) return \"60:00\";\n\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nfunction FocusDuration ({ min, max, label, session, setSession }) {\r\n  const decreaseButtonHandler = () => {\r\n    if (session.focusDuration > min) (setSession({...session, focusDuration: session.focusDuration - 300}));\r\n  }\r\n  \r\n  const increaseButtonHandler = () => {\r\n    if (session.focusDuration < max) (setSession({...session, focusDuration: session.focusDuration + 300}));\r\n  };\r\n  \r\n  return (\r\n    <div className=\"input-group input-group-lg mb-2\">\r\n      <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n        {/* Update this text to display the current focus session duration */}\r\n        {`${label} ${secondsToDuration(session.focusDuration)}`}\r\n      </span>\r\n      <div className=\"input-group-append\">\r\n        {/* Implement decreasing focus duration and disable during a focus or break session */}\r\n        <button\r\n          type=\"button\"\r\n          className={classNames({\r\n            \"btn\": true,\r\n            \"btn-primary\": !session.active,\r\n            \"btn-secondary\": session.active,          })}\r\n          onClick={ !session.active ? decreaseButtonHandler : undefined }\r\n          data-testid=\"decrease-focus\"\r\n        >\r\n          <span className=\"oi oi-minus\" />\r\n        </button>\r\n        {/* Implement increasing focus duration  and disable during a focus or break session */}\r\n        <button\r\n          type=\"button\"\r\n          className={classNames({\r\n            \"btn\": true,\r\n            \"btn-primary\": !session.active,\r\n            \"btn-secondary\": session.active,\r\n          })}\r\n          onClick={ !session.active ? increaseButtonHandler : undefined }\r\n          data-testid=\"increase-focus\"\r\n        >\r\n          <span className=\"oi oi-plus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusDuration;","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nfunction BreakDuration ({ min, max, label, session, setSession }) {\r\n  const decreaseButtonHandler = () => {\r\n    if (session.breakDuration > min) (setSession({ ...session, breakDuration: session.breakDuration - 60 }));\r\n  }\r\n  \r\n  const increaseButtonHandler = () => {\r\n    if (session.breakDuration < max) (setSession({ ...session, breakDuration: session.breakDuration + 60 }));\r\n  };\r\n  \r\n  return (\r\n    <div className=\"input-group input-group-lg mb-2\">\r\n      <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n        {/* Update this text to display the current break session duration */}\r\n        {`${label} ${secondsToDuration(session.breakDuration)}`}\r\n      </span>\r\n      <div className=\"input-group-append\">\r\n        {/* Implement decreasing break duration and disable during a focus or break session */}\r\n        <button\r\n          type=\"button\"\r\n          className={classNames({\r\n            \"btn\": true,\r\n            \"btn-primary\": !session.active,\r\n            \"btn-secondary\": session.active,\r\n          })}\r\n          onClick={ !session.active ? decreaseButtonHandler : undefined }\r\n          data-testid=\"decrease-break\"\r\n        >\r\n          <span className=\"oi oi-minus\" />\r\n        </button>\r\n        {/* Implement increasing break duration  and disable during a focus or break session */}\r\n        <button\r\n          type=\"button\"\r\n          className={classNames({\r\n            \"btn\": true,\r\n            \"btn-primary\": !session.active,\r\n            \"btn-secondary\": session.active,\r\n          })}\r\n          onClick={ !session.active ? increaseButtonHandler : undefined }\r\n          data-testid=\"increase-break\"\r\n        >\r\n          <span className=\"oi oi-plus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BreakDuration;","import React from \"react\";\r\n\r\nfunction ProgressBar ({ session }) {\r\n\r\n  return (\r\n    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n      <div\r\n        className=\"progress-bar\"\r\n        role=\"progressbar\"\r\n        aria-valuemin=\"0\"\r\n        aria-valuemax=\"100\"\r\n        aria-valuenow={ (session.currentDuration - session.timer) / session.currentDuration * 100 }// TODO: Increase aria-valuenow as elapsed time increases\r\n        style={{ width:`${(session.currentDuration - session.timer) / session.currentDuration * 100}%` }} // TODO: Increase width % as elapsed time increases\r\n      />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;","import React from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction Countdown ({ session, isTimerRunning }) {\r\n\r\n  if (!session.active) return null;\r\n\r\n\r\n  return (  \r\n    <div>\r\n      {/* This area should show only when a focus or break session is running or pauses */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* Update message below to include current session (Focusing or On Break) and total duration */}\r\n          <h2 data-testid=\"session-title\">{session.sessionTypeVerb} for {secondsToDuration(session.currentDuration)} minutes</h2>          \r\n          {/* Update message below to include time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session.timer)} remaining\r\n          </p>\r\n          <h3>{!isTimerRunning && `PAUSED`}</h3>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <ProgressBar session={ session } />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countdown;","import React, { useState } from \"react\";\n\n// utilities\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport changeSessionType from \"../utils/change-session-type\";\n\n// components\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport Countdown from \"./Countdown\";\n\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  const sessionInitialState = {\n    active: false,              // is there an active session\n    focusSession: true,         // focus session if true, break session if false\n    sessionTypeVerb: \"Focusing\",// for rendering whether session is \"Focusing\" or \"On Break\"\n    focusDuration: 1500,        // duration currently set for focus period in s, default 1500\n    breakDuration: 300,         // duration currently set for break period in s, default 300\n    currentDuration: 0,         // the duration of current session\n    timer: 1500,                // a timer to count down\n  }\n\n  const [session, setSession] = useState({...sessionInitialState});\n\n  useInterval(\n    () => {\n      setSession({...session, timer: session.timer - 1,});\n      if (session.timer < 1) (changeSessionType(session, setSession));\n\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n\n    if (!session.active) {\n      setSession({\n        ...session,\n        active: true,\n        currentDuration: session.focusDuration,\n        timer: session.focusDuration,\n      });\n    }\n  }\n\n  const stopButtonHandler = () => {\n    setIsTimerRunning(false);\n    setSession({\n      ...session,\n      active: false,\n      focusSession: true,\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusDuration\n            min={ 300 }\n            max={ 3600 }\n            label={ \"Focus Duration: \" }\n            session={ session }\n            setSession={ setSession }\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakDuration\n              min={ 60 }\n              max={ 900 }\n              label={ \"Break Duration: \" }\n              session={ session }\n              setSession={ setSession }\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className={classNames({\n                \"btn\": true,\n                \"btn-primary\": session.active,\n                \"btn-secondary\": !session.active,\n              })}\n              title=\"Stop the session\"\n              onClick={ session.active ? stopButtonHandler : undefined }\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <Countdown\n        session={ session }\n        isTimerRunning={ isTimerRunning }\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","/*  to be used when the timer reaches 0\r\n*   if in a focus session it will change it to a break session   \r\n*   if in a break session it will change it to a focus session\r\n*   it will play a sound either way\r\n*/\r\n\r\nexport default function changeSessionType(session, setSession) {\r\n  \r\n  if (session.focusSession) {\r\n    // do this when changing from focus to break\r\n    setSession({\r\n      ...session,\r\n      focusSession: false,\r\n      sessionTypeVerb: \"On Break\",\r\n      currentDuration: session.breakDuration,\r\n      timer: session.breakDuration,\r\n    });\r\n  } else {\r\n    // do this when changing from break to focus\r\n    setSession({\r\n      ...session,\r\n      focusSession: true,\r\n      sessionTypeVerb: \"Focusing\",\r\n      currentDuration: session.focusDuration,\r\n      timer: session.focusDuration,\r\n    });\r\n  }\r\n  new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1922.mp3`).play();\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}