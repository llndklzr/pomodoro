{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Countdown.js\";\nimport React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction Countdown({\n  session,\n  isTimerRunning\n}) {\n  if (!session.active) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, \"Focusing for \", secondsToDuration(session.timer), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, secondsToDuration(session.timer), \" remaining\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, \"PAUSED\" && isTimerRunning))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": (session.focusDuration - session.timer) / session.focusDuration * 100 // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${(session.focusDuration - session.timer) / session.focusDuration * 100}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default Countdown;","map":{"version":3,"sources":["D:/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Countdown.js"],"names":["React","secondsToDuration","Countdown","session","isTimerRunning","active","timer","height","focusDuration","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,SAASC,SAAT,CAAoB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAApB,EAAiD;AAE/C,MAAI,CAACD,OAAO,CAACE,MAAb,EAAqB,OAAO,IAAP;AAGrB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA8CJ,iBAAiB,CAACE,OAAO,CAACG,KAAT,CAA/D,aAFF,eAIE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,iBAAiB,CAACE,OAAO,CAACG,KAAT,CADpB,eAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,YAAYF,cAAjB,CAPF,CADF,CAFF,eAaE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEG,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAgB,CAACJ,OAAO,CAACK,aAAR,GAAwBL,OAAO,CAACG,KAAjC,IAA0CH,OAAO,CAACK,aAAlD,GAAkE,GALpF,CAKyF;AALzF;AAME,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,GAAG,CAACN,OAAO,CAACK,aAAR,GAAwBL,OAAO,CAACG,KAAjC,IAA0CH,OAAO,CAACK,aAAlD,GAAkE,GAAI;AAAlF,KANT,CAMiG;AANjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAbF,CADF;AA8BD;;AAED,eAAeN,SAAf","sourcesContent":["import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction Countdown ({ session, isTimerRunning }) {\r\n\r\n  if (!session.active) return null;\r\n\r\n\r\n  return (  \r\n    <div>\r\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n          <h2 data-testid=\"session-title\">Focusing for {secondsToDuration(session.timer)} minutes</h2>          \r\n          {/* TODO: Update message below to include time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session.timer)} remaining\r\n          </p>\r\n          <h2>{\"PAUSED\" && isTimerRunning}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={ (session.focusDuration - session.timer) / session.focusDuration * 100 }// TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width:`${ (session.focusDuration - session.timer) / session.focusDuration * 100}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}